docker-machine stop => shuts down the virtual box linux instance
docker-machine start

docker container run hello-world => downloads an example image if not present locally and runs the container -> good test
docker image pull <image_name> => download an image

ctrl + c => will exit back to the console but leave the container running

Docker File => definition of the contents of the image (i.e port of the Tomcat Server inside the container)

docker container run -p <external-port>:<internal-port> <image-name> => -p stands for publish

docker container ls => list all running containers
docker container ls -a => All -> running and stopped

docker-machine ip => if running docker toolbox we need the ip of the Linux running on VirtualBox
    localhost of the VM is not mapped to local host of Windows
    localhost:8080 => root on the docker container | 192.168.99.100:8080 root from the browser on windows
    if we map internal 8080 to local 80 we won't need a port number as :80 is a default port

docker container stop <id> => we don't need to specify the whole id just enough to uniquely identify the container

docker container -it <container-name> -i -> interactive | -t -> terminal
In the course example the instance of an image is alive as long as the command run by docker is active.
    In the case of the Ubuntu image the command is /bin/bash. Since bash is not connected to a terminal it exits
    and the container is shut down

docker container -it runs the image in the interactive mode and connects to the terminal

docker container rm <id> => remove stopped container
docker container prune => will remove all stopped containers -> frees up memory

docker container -d => will run a container in a detached mode -> output of the container console will not be
    connected to the terminal

docker container logs -f <id> will show the output of the container application to stdout | -f is for fallow it will
    continuously show updates

docker container exec -it <id> bash => will run a command inside the container -> exec | -it will connect the bash shell
    to our terminal | exit will return to the terminal
    If bash is not available in case of using a slimmed image we can run <sh> shell

docker image pull <name>:<tag> => if no tag is specified an image tagged latest will be pulled

Install java jdk on the ubuntu container : => from the container shell (docker container run -it ubuntu)
apt-get update
apt-cache search jdk => search the cache for anything with jdk in name
apt-get install -y openjdk-8-jdk => -y -> yes , will not require confirmation
javac => to confirm installation
exit => exit bash shell | will shut down the container | the changes made will persist
docker container commit -a "<name> <email>" <id> <owner>/<image-name> => will create a new image -a -> author
    based on the container with id , in case of the course we will get an ubuntu image with the installed java 8
    on top

&& allows to chain multiple commands on the bash shell

docker image build -t <image-name> . =>  -t -> tag (give the image a name) | . is a directory from which
    image creation is working  (. is this, current directory, build context)

docker is a Dockerfile a a recipe for creating a new image
------------------------Example docker file--------------------------------------------
FROM ubuntu:latest => image we are basing on

MAINTAINER John Smith "contact@domain.com" => information on the creator

RUN apt-get update && apt-get install -y openjdk-8-jdk => commands that docker needs to run on the base image

CMD ["/bin/bash"] => what command should be executed by default when the container is run
----------------------------------------------------------------------------------------

Every line in the docker file is a step or a layer

WORKDIR <path> i.e /usr/local/bin/ => sets up a default path
COPY <file-name> (in the folder specified at the end of the build command) <destination-path> =>
     . will copy to the root or to work folder if it was setup
     i.e COPY test-program.jar .

When we have set up working directory in the docker file when we run the container in the interactive terminal mode
    bash shell will be in the working directory not the root

ADD vs COPY => add can work with remote URLs and unzip archives , it is recommended to use COPY for simplicity
CMD vs ENTRYPOINT => entry point will always run and CMD is just a default | CMD can be overwritten
    i.e in  the course example the CMD ["java", "-jar", "test-program.jar"] will run the java program when container runs
    but we can overwrite that command with i.e /bin/bash and run bash shell instead (it goes after the name of the image)
    ENTRYPOINT cannot be overwritten

When creating docker images always use the most specific base image tags
    default <latest> will change overtime and most likely break the build

Docker file needs to be called specifically "Dockerfile" no extension


/C/Users/user/fleetman-webapp => bash shell path format
C:\Users\user\fleetman-webapp => windows path format

EXPOSE => command is a not a functional docker file command, it's there purely for
    documentation i.e EXPOSE 8080 is not setting the port to 8080 it's simply
    informing that the post is 8080

/usr/local/tomcat/webapps => is a default directory for our code , by default there is some standard files inside
    like the tomcat welcome page. We can clear the folder when making the image in the docker file by running:
    RUN rm -rf /usr/local/tomcat/webapps/*    => rm -> remove | -r -> recursive | -f -> force | * -> all
    this will clear the folder webapps

COPY <source-path> <destination-path> => source file's path is relative to the dockerfile i.e =>
    COPY ./target/fleetman-0.0.1-SNAPSHOT.war /usr/local/tomcat/webapps/ROOT.war
    since the dockerfile in this case is in the root directory of the project we start with ./
    when we put a file at the end of the destination path the source file will be renamed
    ROOT.war is the default file name Tomcat is expecting

ENV JAVA_OPTS="-Dspring.profiles.active=docker-demo" => the application depends on the stub class that is only
    available in the specific profile. To pass an argument to the VM from the docker file we us the
    ENV JAVA_OPTS command
    ! spaces very important ENV JAVA_OPTS = "" is not the same as ENV JAVA_OPTS=""

To deploy the app as a SpringBoot app with embedded Tomcat we change the packaging of the app in the pom.xml
    from war to jar and change the Dockerfile 





